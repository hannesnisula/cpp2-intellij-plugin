{
    parserClass="org.hannesnisula.cpp2plugin.parser.Cpp2Parser"
    
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    
    psiClassPrefix="Cpp2"
    psiImplClassSuffix="Impl"
    psiPackage="org.hannesnisula.cpp2plugin.psi"
    psiImplPackage="org.hannesnisula.cpp2plugin.psi.impl"
    
    elementTypeHolderClass="org.hannesnisula.cpp2plugin.psi.Cpp2Types"
    elementTypeClass="org.hannesnisula.cpp2plugin.psi.Cpp2ElementType"
    tokenTypeClass="org.hannesnisula.cpp2plugin.psi.Cpp2TokenType"
    
    tokens=[
        ARROW               = '->'
        COLONCOLON          = '::'
        DOTDOTDOT           = '...'
        
        COLON               = ':'
        SEMICOLON           = ';'
        LEFT_BRACE          = '{'
        RIGHT_BRACE         = '}'
        LEFT_PARENTHESIS    = '('
        RIGHT_PARENTHESIS   = ')'
        LT                  = '<'
        GT                  = '>'
        EQ                  = '='
        UNDERSCORE          = '_'
        ASTERISK            = '*'
    ]
}

File ::= (Statement | FunctionDefinition | COMMENT)*

FunctionDefinition ::= '(' ParameterDeclaration* ')' ('->' ('_' | TypeSpecifier))? '=' (Statement | StatementBlock)

StatementBlock ::= '{' (Statement | COMMENT)* '}'
Statement ::= (VarDeclaration | VarDefinition | ReturnExpression) ";" {
    pin=1
}

ReturnExpression ::= RETURN Expression

ParameterDeclaration ::= (in | copy | inout | out | move | forward)? VarDeclaration

VarDefinition ::= IDENTIFIER_WORD ':' TypeSpecifier? '=' Expression
VarDeclaration ::= IDENTIFIER_WORD ':' TypeSpecifier !'='
TypeSpecifier ::= (const | '*')*  Scope? TypeIdentifier

Expression ::= AnyIdentifier | NUMBER_LITERAL | STRING_LITERAL

AnyIdentifier ::= ScopedIdentifier | Identifier
ScopedIdentifier ::= (Identifier '::')+ Identifier
Scope ::= (TypeIdentifier '::')+
TypeIdentifier ::= IDENTIFIER_WORD TemplateDefinition?
Identifier ::= IDENTIFIER_WORD (TemplateDefinition | '[' Expression ']')?

TemplateDefinition ::= '<' (IDENTIFIER_WORD | NUMBER_LITERAL | STRING_LITERAL)* '>'
TemplateDeclaration ::= '<' TemplateParamDeclaration+ '>'
TemplateParamDeclaration ::= IDENTIFIER_WORD '...'? (':' IDENTIFIER_WORD)?

private Recovery ::= !(Identifier | NUMBER_LITERAL)