{
    parserClass="org.hannesnisula.cpp2plugin.parser.Cpp2Parser"
    
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    
    psiClassPrefix="Cpp2"
    psiImplClassSuffix="Impl"
    psiPackage="org.hannesnisula.cpp2plugin.psi"
    psiImplPackage="org.hannesnisula.cpp2plugin.psi.impl"
    
    elementTypeHolderClass="org.hannesnisula.cpp2plugin.psi.Cpp2Types"
    elementTypeClass="org.hannesnisula.cpp2plugin.psi.Cpp2ElementType"
    tokenTypeClass="org.hannesnisula.cpp2plugin.psi.Cpp2TokenType"
    
    psiImplUtilClass="org.hannesnisula.cpp2plugin.psi.Cpp2PsiUtil"
    
    extends(".*expr")=expr
    
    tokens=[
        ARROW               = '->'
        COLONCOLON          = '::'
        DOTDOTDOT           = '...'
        PLUSPLUS            = '++'
        MINUSMINUS          = '--'
        OROR                = '||'
        ANDAND              = '&&'
        EQEQ                = '=='
        NEQ                 = '!='
        LTEQ                = '<='
        GTEQ                = '>='
        LTLT                = '<<'
        GTGT                = '>>'
        
        NEWLINE             = '\n'
        
        COLON               = ':'
        SEMICOLON           = ';'
        LEFT_BRACE          = '{'
        RIGHT_BRACE         = '}'
        LEFT_PARENTHESIS    = '('
        RIGHT_PARENTHESIS   = ')'
        LT                  = '<'
        GT                  = '>'
        EQ                  = '='
        UNDERSCORE          = '_'
        PLUS                = '+'
        MINUS               = '-'
        SLASH               = '/'
        MODULO              = '%'
        AND                 = '&'
        OR                  = '|'
        EXP                 = '^'
        
        TYPE_WORD           = 'type'
        THIS                = 'this'
        PUBLIC              = 'public'
        PROTECTED           = 'protected'
        PRIVATE             = 'private'
        
        FOR                 = 'for'
        WHILE               = 'while'
        DO                  = 'do'
        NEXT                = 'next'
        IF                  = 'if'
        ELSE                = 'else'
        CONST               = 'const'
        RETURN              = 'return'
        
        IN                  = 'in'
        COPY                = 'copy'
        INOUT               = 'inout'
        OUT                 = 'out'
        MOVE                = 'move'
        FORWARD             = 'forward'
        
        VIRTUAL             = 'virtual'
        OVERRIDE            = 'override'
        FINAL               = 'final'
        
    ]
}

file ::= (type_decl | func_decl | stmt | stmt_block | comment)*

stmt_block          ::= '{' stmt* '}'
private stmt        ::= (func_decl | decl | assign | expr_stmt | for_loop | comment)
private expr_stmt   ::= expr ';'

for_loop    ::= 'for' expr ('next' expr)? 'do' param_list stmt_block {
    pin='for'
}

assign      ::= lvalue '=' expr ';'
decl        ::= IDENTIFIER_WORD ':' ((type '=' expr) | type | ('=' expr)) ';' {
    pin=3
    mixin="org.hannesnisula.cpp2plugin.psi.Cpp2NamedElementImpl"
    implements="org.hannesnisula.cpp2plugin.psi.Cpp2NamedElement"
    methods=[getIdentifierString getNameIdentifier setName]
}

func_decl   ::= IDENTIFIER_WORD ':' template_decl? param_list return_type? (('='? expr ';') | ('=' stmt_block)) {
    pin=param_list
}
return_type ::= '->' ('_' | type)

type_decl           ::= IDENTIFIER_WORD ':' template_decl? METAFUNCTION? 'type' '=' '{' member_decl* '}'
member_decl         ::= (member_access? (type_decl | func_decl | decl | comment))
member_access       ::= ('public' | 'protected' | 'private')

func_call           ::= scope? IDENTIFIER_WORD template? '(' arg* ')' {extends=expr}
arg                 ::= param_kind? expr
param_list          ::= '(' ((this_param | param) (',' param)*)? ')'
param               ::= param_kind? ((IDENTIFIER_WORD (':' ('_' | type))?) | (IDENTIFIER_WORD '...'))
private this_param  ::= this_param_kind? 'this'

expr ::= group_14_expr | group_13_expr | group_12_expr | group_11_expr | group_10_expr | group_9_expr | group_8_expr | group_7_expr | group_6_expr | group_5_expr | group_2_expr | lvalue | literal

private group_14_expr   ::= or_expr
private group_13_expr   ::= and_expr
private group_12_expr   ::= bit_or_expr
private group_11_expr   ::= bit_xor_expr
private group_10_expr   ::= bit_and_expr
private group_9_expr    ::= eq_expr | neq_expr
private group_8_expr    ::= lt_expr | gt_expr | lteq_expr | gteq_expr
private group_7_expr    ::= left_shift_expr | right_shift_expr
private group_6_expr    ::= add_expr | sub_expr
private group_5_expr    ::= mul_expr | div_expr | mod_expr
private group_2_expr    ::= func_call | subscript_expr

lvalue              ::= scope? IDENTIFIER_WORD(DEREF | ('[' expr ']' | ('.' IDENTIFIER_WORD)))* {
    extends=expr
    methods=[getIdentifierString getReferences]
}

or_expr             ::= expr '||'   expr {rightAssociative=false}
and_expr            ::= expr '&&'   expr {rightAssociative=false}
bit_or_expr         ::= expr '|'    expr {rightAssociative=false}
bit_xor_expr        ::= expr '^'    expr {rightAssociative=false}
bit_and_expr        ::= expr '&'    expr {rightAssociative=false}
eq_expr             ::= expr '=='   expr {rightAssociative=false}
neq_expr            ::= expr '!='   expr {rightAssociative=false}
lteq_expr           ::= expr '<='   expr {rightAssociative=false}
gteq_expr           ::= expr '>='   expr {rightAssociative=false}
lt_expr             ::= expr '<'    expr {rightAssociative=false}
gt_expr             ::= expr '>'    expr {rightAssociative=false}
right_shift_expr    ::= expr '>>'   expr {rightAssociative=false}
left_shift_expr     ::= expr '<<'   expr {rightAssociative=false}
add_expr            ::= expr '+'    expr {rightAssociative=false}
sub_expr            ::= expr '-'    expr {rightAssociative=false}
mul_expr            ::= expr MUL    expr {rightAssociative=false}
div_expr            ::= expr '/'    expr {rightAssociative=false}
mod_expr            ::= expr '%'    expr {rightAssociative=false}
subscript_expr      ::= expr '[' expr ']'

template_decl   ::= '<' ((IDENTIFIER_WORD (':' (TYPE_WORD | type))?) | (IDENTIFIER_WORD '...' (':' TYPE_WORD)?))+ '>'
template        ::= '<' (type)* '>'
type            ::= qualifier* scope? IDENTIFIER_WORD template?
scope           ::= (IDENTIFIER_WORD template? '::')+

literal         ::= BOOL_LITERAL | INT_LITERAL | FLOAT_LITERAL | STRING_LITERAL {extends=expr}

private qualifier       ::= ('const' | '*')
private this_param_kind ::= ('virtual' | 'override' | 'final' | param_kind)
private param_kind      ::= ('in' | 'copy' | 'inout' | 'out' | 'move' | 'forward')