// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Cpp2.flex

package org.hannesnisula.cpp2plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.hannesnisula.cpp2plugin.psi.Cpp2Types;
import com.intellij.psi.TokenType;


class Cpp2Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\6\22"+
    "\1\23\1\22\1\24\1\25\1\26\1\27\1\30\1\0"+
    "\1\31\1\32\1\33\3\32\1\34\5\35\1\36\10\35"+
    "\1\37\2\35\1\40\2\35\1\0\1\41\1\0\1\42"+
    "\1\43\1\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\2\35\1\55\1\56\1\57\1\60"+
    "\1\61\1\35\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\35\1\72\1\73\1\74\7\0\1\3"+
    "\32\0\1\75\u01df\0\1\75\177\0\13\75\35\0\2\3"+
    "\5\0\1\75\57\0\1\75\240\0\1\75\377\0\u0100\76";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\2\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\1\2\21\1\22\1\23\14\21"+
    "\1\2\1\21\1\24\1\25\1\26\1\2\1\27\1\30"+
    "\1\0\1\31\1\0\1\32\1\33\1\34\1\35\1\0"+
    "\1\36\1\37\1\0\1\37\2\13\2\0\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\21\1\47\4\21"+
    "\1\50\1\51\15\21\1\2\1\21\1\52\1\31\1\53"+
    "\5\13\1\0\1\37\5\21\1\54\4\21\1\55\14\21"+
    "\1\56\1\57\3\21\1\60\1\21\1\61\5\21\1\62"+
    "\1\63\1\64\3\21\1\65\1\66\1\21\1\67\6\21"+
    "\1\70\1\21\1\71\5\21\1\72\1\73\1\21\1\74"+
    "\2\21\1\75\1\21\1\76\1\21\1\77\1\21\1\100"+
    "\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\77\0\u017a"+
    "\0\77\0\77\0\77\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5"+
    "\0\u02f4\0\u0333\0\77\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e"+
    "\0\u04ad\0\77\0\u046e\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\77\0\u085e\0\77\0\u089d\0\77\0\77\0\u013b"+
    "\0\77\0\u08dc\0\77\0\77\0\77\0\77\0\u091b\0\u095a"+
    "\0\u0999\0\u09d8\0\77\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\u0b13\0\u0b52\0\u046e"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u046e\0\u0c8d\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\77\0\u013b\0\77"+
    "\0\u107d\0\u10bc\0\77\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7"+
    "\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef"+
    "\0\u142e\0\u046e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8"+
    "\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u046e\0\u046e"+
    "\0\u1761\0\u17a0\0\u17df\0\u046e\0\u181e\0\u046e\0\u185d\0\u189c"+
    "\0\u18db\0\u191a\0\u1959\0\u046e\0\u046e\0\u046e\0\u1998\0\u19d7"+
    "\0\u1a16\0\u046e\0\u046e\0\u1a55\0\u046e\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u046e\0\u1c0e\0\u046e\0\u1c4d\0\u1c8c"+
    "\0\u1ccb\0\u1d0a\0\u1d49\0\u046e\0\u046e\0\u1d88\0\u046e\0\u1dc7"+
    "\0\u1e06\0\u046e\0\u1e45\0\u046e\0\u1e84\0\u046e\0\u1ec3\0\u046e"+
    "\0\u046e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\3\21\1\22\1\23\1\24\1\25\1\26\1\27\4\30"+
    "\2\31\1\30\1\2\1\32\1\33\2\30\1\34\1\35"+
    "\1\36\1\37\2\30\1\40\1\30\1\41\1\42\1\43"+
    "\1\44\1\45\1\30\1\46\1\47\1\50\1\51\2\30"+
    "\1\52\1\53\1\54\1\4\1\2\100\0\2\55\10\0"+
    "\1\56\52\0\1\55\23\0\1\56\112\0\1\57\47\0"+
    "\5\60\1\61\33\60\1\62\35\60\7\0\1\63\103\0"+
    "\1\64\77\0\1\65\2\0\1\20\3\21\4\0\1\66"+
    "\64\0\1\67\77\0\1\70\67\0\1\21\5\0\1\71"+
    "\1\0\4\21\7\0\1\72\1\73\1\0\1\74\1\75"+
    "\1\76\4\0\1\72\2\0\1\77\1\73\3\0\1\74"+
    "\3\0\1\77\3\0\1\75\2\0\1\76\16\0\1\21"+
    "\5\0\1\71\1\0\4\21\10\0\1\73\1\0\1\74"+
    "\1\75\10\0\1\77\1\73\3\0\1\74\3\0\1\77"+
    "\3\0\1\75\35\0\1\100\100\0\1\101\1\102\76\0"+
    "\1\103\76\0\1\104\1\105\100\0\7\106\2\0\27\106"+
    "\25\0\4\30\6\0\7\30\2\0\27\30\12\0\1\60"+
    "\12\0\4\30\6\0\7\30\2\0\27\30\25\0\4\30"+
    "\6\0\7\30\2\0\15\30\1\107\11\30\25\0\4\30"+
    "\6\0\7\30\2\0\15\30\1\110\11\30\25\0\4\30"+
    "\6\0\7\30\2\0\12\30\1\111\14\30\25\0\4\30"+
    "\6\0\7\30\2\0\1\30\1\112\7\30\1\113\3\30"+
    "\1\114\11\30\25\0\4\30\6\0\7\30\2\0\6\30"+
    "\1\115\5\30\1\116\12\30\25\0\4\30\6\0\7\30"+
    "\2\0\15\30\1\117\11\30\25\0\4\30\6\0\7\30"+
    "\2\0\1\30\1\120\3\30\1\121\21\30\25\0\4\30"+
    "\6\0\7\30\2\0\22\30\1\122\1\123\3\30\25\0"+
    "\4\30\6\0\7\30\2\0\17\30\1\124\2\30\1\125"+
    "\4\30\25\0\4\30\6\0\7\30\2\0\5\30\1\126"+
    "\21\30\25\0\4\30\6\0\7\30\2\0\10\30\1\127"+
    "\6\30\1\130\6\30\1\131\12\0\1\60\12\0\3\30"+
    "\1\31\6\0\7\30\2\0\20\30\1\132\6\30\6\0"+
    "\2\55\15\0\4\30\6\0\7\30\2\0\11\30\1\133"+
    "\11\30\1\134\3\30\25\0\4\30\6\0\7\30\2\0"+
    "\10\30\1\135\16\30\100\0\1\136\4\0\2\55\63\0"+
    "\1\55\10\0\5\60\1\137\33\60\1\62\35\60\16\0"+
    "\1\140\60\0\2\70\2\0\72\70\11\0\1\71\7\0"+
    "\4\71\10\0\1\73\1\0\1\73\11\0\1\77\1\73"+
    "\3\0\1\73\3\0\1\77\25\0\1\141\7\0\2\141"+
    "\113\0\1\142\1\143\15\0\1\142\7\0\1\143\47\0"+
    "\1\144\16\0\1\144\31\0\1\145\7\0\4\145\6\0"+
    "\3\145\7\0\6\145\42\0\1\146\2\0\4\147\73\0"+
    "\4\106\6\0\7\106\2\0\27\106\25\0\4\30\6\0"+
    "\7\30\2\0\14\30\1\150\1\30\1\151\10\30\25\0"+
    "\4\30\6\0\7\30\2\0\20\30\1\152\6\30\25\0"+
    "\4\30\6\0\7\30\2\0\12\30\1\153\14\30\25\0"+
    "\4\30\6\0\7\30\2\0\14\30\1\154\12\30\25\0"+
    "\4\30\6\0\7\30\2\0\17\30\1\155\7\30\25\0"+
    "\4\30\6\0\7\30\2\0\15\30\1\156\11\30\25\0"+
    "\4\30\6\0\7\30\2\0\23\30\1\157\3\30\25\0"+
    "\4\30\6\0\7\30\2\0\13\30\1\160\13\30\25\0"+
    "\4\30\6\0\7\30\2\0\25\30\1\161\1\30\25\0"+
    "\4\30\6\0\7\30\2\0\21\30\1\162\5\30\25\0"+
    "\4\30\6\0\7\30\2\0\5\30\1\163\21\30\25\0"+
    "\4\30\6\0\7\30\2\0\11\30\1\164\3\30\1\165"+
    "\11\30\25\0\4\30\6\0\7\30\2\0\2\30\1\166"+
    "\24\30\25\0\4\30\6\0\7\30\2\0\21\30\1\167"+
    "\5\30\25\0\4\30\6\0\7\30\2\0\11\30\1\170"+
    "\15\30\25\0\4\30\6\0\7\30\2\0\22\30\1\171"+
    "\4\30\25\0\4\30\6\0\7\30\2\0\16\30\1\172"+
    "\10\30\25\0\4\30\6\0\7\30\2\0\11\30\1\173"+
    "\15\30\25\0\4\30\6\0\7\30\2\0\17\30\1\174"+
    "\7\30\6\0\2\55\15\0\4\30\6\0\7\30\2\0"+
    "\23\30\1\134\3\30\25\0\4\30\6\0\7\30\2\0"+
    "\11\30\1\175\15\30\15\0\1\141\7\0\2\141\14\0"+
    "\1\74\1\75\15\0\1\74\7\0\1\75\50\0\1\143"+
    "\25\0\1\143\47\0\1\143\16\0\1\143\31\0\1\145"+
    "\7\0\4\145\6\0\3\145\1\0\1\74\1\75\4\0"+
    "\6\145\3\0\1\74\7\0\1\75\31\0\4\147\73\0"+
    "\4\147\10\0\1\73\1\0\1\73\12\0\1\73\3\0"+
    "\1\73\41\0\4\30\6\0\7\30\2\0\20\30\1\176"+
    "\6\30\25\0\4\30\6\0\7\30\2\0\26\30\1\177"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\200\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\20\30\1\171\6\30"+
    "\25\0\4\30\6\0\7\30\2\0\1\30\1\201\25\30"+
    "\25\0\4\30\6\0\7\30\2\0\24\30\1\202\2\30"+
    "\25\0\4\30\6\0\7\30\2\0\22\30\1\203\4\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\204\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\205\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\21\30\1\206\5\30"+
    "\25\0\4\30\6\0\7\30\2\0\17\30\1\207\7\30"+
    "\25\0\4\30\6\0\7\30\2\0\23\30\1\210\3\30"+
    "\25\0\4\30\6\0\7\30\2\0\21\30\1\211\5\30"+
    "\25\0\4\30\6\0\7\30\2\0\12\30\1\212\14\30"+
    "\25\0\4\30\6\0\7\30\2\0\22\30\1\213\4\30"+
    "\25\0\4\30\6\0\7\30\2\0\20\30\1\214\6\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\215\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\216\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\14\30\1\217\12\30"+
    "\25\0\4\30\6\0\7\30\2\0\21\30\1\220\5\30"+
    "\25\0\4\30\6\0\7\30\2\0\12\30\1\221\14\30"+
    "\25\0\4\30\6\0\7\30\2\0\21\30\1\222\5\30"+
    "\25\0\4\30\6\0\7\30\2\0\12\30\1\223\14\30"+
    "\25\0\4\30\6\0\7\30\2\0\1\30\1\224\25\30"+
    "\25\0\4\30\6\0\7\30\2\0\21\30\1\225\5\30"+
    "\25\0\4\30\6\0\7\30\2\0\20\30\1\226\6\30"+
    "\25\0\4\30\6\0\7\30\2\0\17\30\1\227\7\30"+
    "\25\0\4\30\6\0\7\30\2\0\1\30\1\230\25\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\231\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\11\30\1\232\15\30"+
    "\25\0\4\30\6\0\7\30\2\0\17\30\1\233\7\30"+
    "\25\0\4\30\6\0\7\30\2\0\7\30\1\234\17\30"+
    "\25\0\4\30\6\0\7\30\2\0\22\30\1\235\4\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\236\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\17\30\1\237\7\30"+
    "\25\0\4\30\6\0\7\30\2\0\16\30\1\240\10\30"+
    "\25\0\4\30\6\0\7\30\2\0\11\30\1\241\15\30"+
    "\25\0\4\30\6\0\7\30\2\0\21\30\1\242\5\30"+
    "\25\0\4\30\6\0\7\30\2\0\3\30\1\243\23\30"+
    "\25\0\4\30\6\0\7\30\2\0\3\30\1\244\23\30"+
    "\25\0\4\30\6\0\7\30\2\0\14\30\1\245\12\30"+
    "\25\0\4\30\6\0\7\30\2\0\1\30\1\246\25\30"+
    "\25\0\4\30\6\0\7\30\2\0\4\30\1\247\22\30"+
    "\25\0\4\30\6\0\7\30\2\0\1\30\1\250\25\30"+
    "\25\0\4\30\6\0\7\30\2\0\4\30\1\251\22\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\252\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\21\30\1\253\5\30"+
    "\25\0\4\30\6\0\7\30\2\0\12\30\1\254\14\30"+
    "\25\0\4\30\6\0\7\30\2\0\3\30\1\255\23\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\256\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\257\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\5\30\1\260\21\30"+
    "\25\0\4\30\6\0\7\30\2\0\4\30\1\261\22\30"+
    "\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7938];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\3\11\7\1\1\11"+
    "\6\1\1\11\17\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\0\1\11\1\0\4\11\1\0\2\1\1\0\1\11"+
    "\2\1\2\0\6\11\30\1\1\11\1\1\1\11\2\1"+
    "\1\11\2\1\1\0\113\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Cpp2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 66: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 67: break;
          case 3:
            { return Cpp2Types.MODULO;
            }
          // fall through
          case 68: break;
          case 4:
            { return Cpp2Types.AND;
            }
          // fall through
          case 69: break;
          case 5:
            { return Cpp2Types.LEFT_PARENTHESIS;
            }
          // fall through
          case 70: break;
          case 6:
            { return Cpp2Types.RIGHT_PARENTHESIS;
            }
          // fall through
          case 71: break;
          case 7:
            { return Cpp2Types.DEREF;
            }
          // fall through
          case 72: break;
          case 8:
            { return Cpp2Types.PLUS;
            }
          // fall through
          case 73: break;
          case 9:
            { return Cpp2Types.MINUS;
            }
          // fall through
          case 74: break;
          case 10:
            { return Cpp2Types.SLASH;
            }
          // fall through
          case 75: break;
          case 11:
            { return Cpp2Types.INT_LITERAL;
            }
          // fall through
          case 76: break;
          case 12:
            { return Cpp2Types.COLON;
            }
          // fall through
          case 77: break;
          case 13:
            { return Cpp2Types.SEMICOLON;
            }
          // fall through
          case 78: break;
          case 14:
            { return Cpp2Types.LT;
            }
          // fall through
          case 79: break;
          case 15:
            { return Cpp2Types.EQ;
            }
          // fall through
          case 80: break;
          case 16:
            { return Cpp2Types.GT;
            }
          // fall through
          case 81: break;
          case 17:
            { return Cpp2Types.IDENTIFIER_WORD;
            }
          // fall through
          case 82: break;
          case 18:
            { return Cpp2Types.EXP;
            }
          // fall through
          case 83: break;
          case 19:
            { return Cpp2Types.UNDERSCORE;
            }
          // fall through
          case 84: break;
          case 20:
            { return Cpp2Types.LEFT_BRACE;
            }
          // fall through
          case 85: break;
          case 21:
            { return Cpp2Types.OR;
            }
          // fall through
          case 86: break;
          case 22:
            { return Cpp2Types.RIGHT_BRACE;
            }
          // fall through
          case 87: break;
          case 23:
            { return Cpp2Types.MUL;
            }
          // fall through
          case 88: break;
          case 24:
            { return Cpp2Types.NEQ;
            }
          // fall through
          case 89: break;
          case 25:
            { return Cpp2Types.STRING_LITERAL;
            }
          // fall through
          case 90: break;
          case 26:
            { return Cpp2Types.ANDAND;
            }
          // fall through
          case 91: break;
          case 27:
            { return Cpp2Types.PLUSPLUS;
            }
          // fall through
          case 92: break;
          case 28:
            { return Cpp2Types.MINUSMINUS;
            }
          // fall through
          case 93: break;
          case 29:
            { return Cpp2Types.ARROW;
            }
          // fall through
          case 94: break;
          case 30:
            { return Cpp2Types.COMMENT;
            }
          // fall through
          case 95: break;
          case 31:
            { return Cpp2Types.FLOAT_LITERAL;
            }
          // fall through
          case 96: break;
          case 32:
            { return Cpp2Types.COLONCOLON;
            }
          // fall through
          case 97: break;
          case 33:
            { return Cpp2Types.LTLT;
            }
          // fall through
          case 98: break;
          case 34:
            { return Cpp2Types.LTEQ;
            }
          // fall through
          case 99: break;
          case 35:
            { return Cpp2Types.EQEQ;
            }
          // fall through
          case 100: break;
          case 36:
            { return Cpp2Types.GTEQ;
            }
          // fall through
          case 101: break;
          case 37:
            { return Cpp2Types.GTGT;
            }
          // fall through
          case 102: break;
          case 38:
            { return Cpp2Types.METAFUNCTION;
            }
          // fall through
          case 103: break;
          case 39:
            { return Cpp2Types.DO;
            }
          // fall through
          case 104: break;
          case 40:
            { return Cpp2Types.IF;
            }
          // fall through
          case 105: break;
          case 41:
            { return Cpp2Types.IN;
            }
          // fall through
          case 106: break;
          case 42:
            { return Cpp2Types.OROR;
            }
          // fall through
          case 107: break;
          case 43:
            { return Cpp2Types.DOTDOTDOT;
            }
          // fall through
          case 108: break;
          case 44:
            { return Cpp2Types.FOR;
            }
          // fall through
          case 109: break;
          case 45:
            { return Cpp2Types.OUT;
            }
          // fall through
          case 110: break;
          case 46:
            { return Cpp2Types.COPY;
            }
          // fall through
          case 111: break;
          case 47:
            { return Cpp2Types.ELSE;
            }
          // fall through
          case 112: break;
          case 48:
            { return Cpp2Types.MOVE;
            }
          // fall through
          case 113: break;
          case 49:
            { return Cpp2Types.NEXT;
            }
          // fall through
          case 114: break;
          case 50:
            { return Cpp2Types.THIS;
            }
          // fall through
          case 115: break;
          case 51:
            { return Cpp2Types.BOOL_LITERAL;
            }
          // fall through
          case 116: break;
          case 52:
            { return Cpp2Types.TYPE_WORD;
            }
          // fall through
          case 117: break;
          case 53:
            { return Cpp2Types.CONST;
            }
          // fall through
          case 118: break;
          case 54:
            { return Cpp2Types.FINAL;
            }
          // fall through
          case 119: break;
          case 55:
            { return Cpp2Types.INOUT;
            }
          // fall through
          case 120: break;
          case 56:
            { return Cpp2Types.USING;
            }
          // fall through
          case 121: break;
          case 57:
            { return Cpp2Types.WHILE;
            }
          // fall through
          case 122: break;
          case 58:
            { return Cpp2Types.PUBLIC;
            }
          // fall through
          case 123: break;
          case 59:
            { return Cpp2Types.RETURN;
            }
          // fall through
          case 124: break;
          case 60:
            { return Cpp2Types.FORWARD;
            }
          // fall through
          case 125: break;
          case 61:
            { return Cpp2Types.PRIVATE;
            }
          // fall through
          case 126: break;
          case 62:
            { return Cpp2Types.VIRTUAL;
            }
          // fall through
          case 127: break;
          case 63:
            { return Cpp2Types.OVERRIDE;
            }
          // fall through
          case 128: break;
          case 64:
            { return Cpp2Types.NAMESPACE;
            }
          // fall through
          case 129: break;
          case 65:
            { return Cpp2Types.PROTECTED;
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
